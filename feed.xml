<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RealGrid DEMO</title>
    <description>RealGrid 데모사이트 입니다.</description>
    <link>demo.realgrid.com/demo/</link>
    <atom:link href="demo.realgrid.com/demo/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 11 Nov 2016 15:53:46 +0900</pubDate>
    <lastBuildDate>Fri, 11 Nov 2016 15:53:46 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>데모페이지 작성요령</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;목차&lt;/h2&gt;

&lt;p&gt;기본적으로 데모페이지는 markdown 문서로 작성합니다. 지킬(jekyll)의 리퀴드(liquid) 템플릿을 사용할 수도 있습니다.
문서내용은 자유로운 편집을 보장하지만, 정해진 서식을 지켜야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아래 링크는 각 서식에 해당하는 섹션으로 바로 이동 합니다. 해당 서식 작성방법을 확인하시고 그대로 사용하시면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#section-sidebar---&quot;&gt;메뉴 및 제목 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#front-matter&quot;&gt;프론트메터&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-button-&quot;&gt;버튼 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-link-&quot;&gt;링크 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-image-&quot;&gt;이미지 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-code-&quot;&gt;코드 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-grid-&quot;&gt;그리드 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-tree-&quot;&gt;트리 표시하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dev-box&quot;&gt;데브 박스(dev box)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#grid-toolbox--&quot;&gt;그리드 툴 박스&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bootstrap&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-sidebar---&quot;&gt;&lt;section-sidebar&gt;메뉴 및 제목 표시하기&lt;/section-sidebar&gt;&lt;/h2&gt;

&lt;p&gt;왼쪽에 보이는 메뉴영역에는 굵은글씨로 카테고리(category)가 표시되고 그 아래 해당 카테고리에 포함된 데모페이지들이 프론트메터의 &lt;code class=&quot;highlighter-rouge&quot;&gt;order&lt;/code&gt;의 순서로 표시됩니다.&lt;/p&gt;

&lt;p&gt;사이드바에는 각 데모페이지의 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;이 표시됩니다. 만약 부제목을 사이드바에 표시하고 싶다면, 문서 작성시
##(샵샵)을 이용해 제목을 작성합니다. 문서에 포함된 ##(샵샵) 타이틀은 자동으로 사이드바에 표시되며,
이후 ###(샵샵샵) 과 같이 하위 제목을 표시 할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사이드바에 표시되는 제목은 문서의 타이틀과 ##(샵샵) ###(샵샵샵) 까지 입니다. 그 이하는 표시되지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하지만, 권장하건데 그리드 데모가 위주인 데모페이지에서는 사용자의 시선을 데모에 집중시키기 위해 부제목을 표시하지 않는 것이 좋습니다.
아래 제목표시 포멧을 확인하고 문서에 활용하세요.&lt;/p&gt;

&lt;h2 id=&quot;title-2--&quot;&gt;제목 Title 2 : 샵샵&lt;/h2&gt;

&lt;p&gt;제목 2의 폰트 크기는 26px 입니다.&lt;/p&gt;

&lt;h3 id=&quot;title-3--&quot;&gt;제목 Title 3 : 샵샵샵&lt;/h3&gt;

&lt;p&gt;제목 3의 폰트 크기는 22px 입니다.&lt;/p&gt;

&lt;h4 id=&quot;title-4--&quot;&gt;제목 Title 4 : 샵샵샵샵&lt;/h4&gt;

&lt;p&gt;제목 4의 폰트 크기는 20px 입니다.&lt;/p&gt;

&lt;h2 id=&quot;front-matter&quot;&gt;프론트메터(front-matter)&lt;/h2&gt;

&lt;p&gt;데모페이지 작성시 프론트메터는 문서의 상단에 반드시 기입해야 합니다. 프론트메터는 아래와 같은 기준으로 작성합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;: page&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;: 상단 제목&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;: 제목 아래에 표시할 부제목 또는 페이지 설명을 입력합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order&lt;/code&gt;: 사이드바 제목 표시 순번입니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;devbox&lt;/code&gt;: devbox 표시여부를 true 또는 false로 입력합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;devboxfile&lt;/code&gt;: devbox에 표시될 markdown filename, ./devbox 폴더 밑에 해당 파일이 있어야 합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;categories&lt;/code&gt;: 데모 페이지 카테고리명&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;: 페이지검색용 태그&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;데모페이지 프론트메터 작성 예&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;
---
layout: page
title: 인디케이터
order: 1
devbox: true
devboxfile: indicator-dbox.md
categories:
  - 그리드 구성요소
tags: ['indicator', 'item', 'number', '행번호']
---
&lt;/pre&gt;

&lt;h2 id=&quot;section-button-&quot;&gt;&lt;section-button&gt;버튼 표시하기&lt;/section-button&gt;&lt;/h2&gt;

&lt;p&gt;버튼은 html의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그를 이용해 화면에 추가하며, javascript 함수를 호출하는 방식으로 동작을 구현할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;기본 버튼&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;devbox&lt;/code&gt;등 문서에서 사용되는 기본 버튼 입니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn primary small round lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;primary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn secondary small round lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;secondary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn tertiary small round lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;tertiary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn ancillary small round lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ancillary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn orange small round lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;orange&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn danger small round lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;danger&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;위 코드를 페이지에 입력하면 아래와 같은 버튼이 표시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn primary small round lowercase&quot;&gt;primary&lt;/a&gt;
&lt;a class=&quot;btn secondary small round lowercase&quot;&gt;secondary&lt;/a&gt;
&lt;a class=&quot;btn tertiary small round lowercase&quot;&gt;tertiary&lt;/a&gt;
&lt;a class=&quot;btn ancillary small round lowercase&quot;&gt;ancillary&lt;/a&gt;
&lt;a class=&quot;btn orange small round lowercase&quot;&gt;orange&lt;/a&gt;
&lt;a class=&quot;btn danger small round lowercase&quot;&gt;danger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;특별한 경우가 아니면 아래 기본 버튼 만 사용하세요.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn primary small round lowercase&quot;&gt;primary&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;추가 버튼(특수용도)&lt;/h4&gt;

&lt;p&gt;특수용도로 사용하기 위해 만든 버튼 입니다. 문서내에서는 사용하지 마세요.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn primary small lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;primary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn secondary small lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;secondary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn tertiary small lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;tertiary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn ancillary small lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ancillary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn orange small lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;orange&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn danger small lowercase&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;danger&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;위 코드를 페이지에 입력하면 아래와 같은 버튼이 표시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn primary small lowercase&quot;&gt;primary&lt;/a&gt;
&lt;a class=&quot;btn secondary small lowercase&quot;&gt;secondary&lt;/a&gt;
&lt;a class=&quot;btn tertiary small lowercase&quot;&gt;tertiary&lt;/a&gt;
&lt;a class=&quot;btn ancillary small lowercase&quot;&gt;ancillary&lt;/a&gt;
&lt;a class=&quot;btn orange small lowercase&quot;&gt;orange&lt;/a&gt;
&lt;a class=&quot;btn danger small lowercase&quot;&gt;danger&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-link-&quot;&gt;&lt;section-link&gt;링크 표시하기&lt;/section-link&gt;&lt;/h2&gt;

&lt;p&gt;페이지에 링크를 삽입하려면 마크다운 문법을 사용하시면 됩니다.&lt;/p&gt;

&lt;pre&gt;
[네이버 링크](http://www.naver.com/){:target=&quot;_blank&quot;}
&lt;/pre&gt;

&lt;p&gt;예를 들어 페이지에 아래와 같이 입력하면 아래와 같은 링크가 표시됩니다. 뒤에 붙은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:target=&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_blank&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;은 새창으로 링크를 열것인지 결정합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.naver.com/&quot; target=&quot;_blank&quot;&gt;네이버 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다른 데모 페이지와 같이 demo.realgrid.com 프로젝트 내에 포함된 페이지나 파일의 링크를 표시할 때에는 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 해당 경로의 앞에 붙여주기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt;필터를 사용한 리퀴드 템플릿 문법을 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;즉, _config.yml 에 입력되어 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt; 값을 렌더링 시점에 해당 링크의 앞에 붙여주는 겁니다.&lt;/p&gt;

&lt;pre&gt;
[인디케이터 데모 페이지 링크]({{ &quot;/GridComponent/Indicator/&quot; | prepend: site.baseurl }})
&lt;/pre&gt;

&lt;p&gt;우리는 현재 &lt;code class=&quot;highlighter-rouge&quot;&gt;/demo&lt;/code&gt;라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 사용하기 때문에 위 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;/demo/GridComponent/Indicator&lt;/code&gt; 로 렌더링 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/demo/GridComponent/Indicator/&quot;&gt;인디케이터 데모 페이지 링크&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-image-&quot;&gt;&lt;section-image&gt;이미지 표시하기&lt;/section-image&gt;&lt;/h2&gt;

&lt;p&gt;데모 페이지에서 사용하는 이미지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource/image/&lt;/code&gt;폴더에 해당 데모의 카테고리 영문명을 폴더로 만들어 추가합니다.
이미지를 페이지에 표시할때에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt;해 주어야 합니다.&lt;/p&gt;

&lt;p&gt;이미지를 표시하는 방법은 markdown 문법으로 아래와 같이 작성 합니다.&lt;/p&gt;

&lt;pre&gt;
![이미지타이틀]({{ &quot;/resource/image/sampleimage.png&quot; | prepend: site.baseurl }})
&lt;/pre&gt;

&lt;p&gt;위 코드를 입력하면 아래와 같이 이미지가 표시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/demo/resource/image/sampleimage.png&quot; alt=&quot;이미지타이틀&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-code-&quot;&gt;&lt;section-code&gt;코드 표시하기&lt;/section-code&gt;&lt;/h2&gt;

&lt;p&gt;데모페이지의 코드표시기(highlighter)는 &lt;a href=&quot;http://rouge.jneen.net/&quot; target=&quot;_blank&quot;&gt;rouge&lt;/a&gt; 입니다.&lt;/p&gt;

&lt;p&gt;문서내부에 코드를 표시할때에는 아래와 같이 &lt;mark&gt;` (백틱 backtick)마크&lt;/mark&gt;를 연속으로 3개 입력하고, 그 뒤에 표현할 언어를 입력하면 됩니다.
코드를 표시할 수 있는 여러가지 방법이 있지만, 데모사이트 문서를 작성할 때에는 반드시 아래의 방법을 따라 주시기 바랍니다.&lt;/p&gt;

&lt;pre&gt;
&lt;mark&gt;```js&lt;/mark&gt;
function funcExample(param1, param2) {
  var strParam = 'param';
  var intParam = 0;

  return param1;
}
&lt;mark&gt;```&lt;/mark&gt;
&lt;/pre&gt;

&lt;p&gt;javascript 코드를 위와 같이 입력하면 아래와 같이 표시됩니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcExample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strParam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'param'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;intParam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;HTML코드의 경우 language 영역에 ‘html’ 을 입력합니다.&lt;/p&gt;

&lt;pre&gt;
&lt;mark&gt;```html&lt;/mark&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;p id=&amp;quot;demo&amp;quot;&amp;gt;Click the button to display the cookies associated with this document.&amp;lt;/p&amp;gt;

&amp;lt;button onclick=&amp;quot;myFunction()&amp;quot;&amp;gt;Try it&amp;lt;/button&amp;gt;

&amp;lt;script&amp;gt;
function myFunction() {
    document.getElementById(&amp;quot;demo&amp;quot;).innerHTML =
    &amp;quot;Cookies associated with this document: &amp;quot; + document.cookie;
}
&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;mark&gt;```&lt;/mark&gt;
&lt;/pre&gt;

&lt;p&gt;위 코드는 아래와 같이 표시됩니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click the button to display the cookies associated with this document.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myFunction()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Try it&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Cookies associated with this document: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-grid-&quot;&gt;&lt;section-grid&gt;그리드 표시하기&lt;/section-grid&gt;&lt;/h2&gt;

&lt;p&gt;그리드를 페이지에 표시하는 기본방법은 페이지에 아래와 같은 코드를 입력하면 됩니다.
아래 코드는 jekyll 템플릿으로 완성된 그리드를 미리 렌더링 하여 페이지에 그리드가 표시되게 하고 원하는 데이터까지 불러 올 수 있습니다.
물론, 그리드의 레이아웃이나 데이터는 모두 미리 정의 되어 있어야 합니다.&lt;/p&gt;

&lt;pre&gt;
{% include realgrid.html
  gridVar=&quot;gridView&quot;
  dpVar=&quot;dataProvider&quot;
  &lt;mark&gt;fieldSet=&quot;fieldset1&quot;
  successFieldSet=&quot;onSuccessFieldSet&quot;
  doneFieldSet=&quot;onDoneFieldSet&quot;
  failFieldSet=&quot;onFailFieldSet&quot;
  columnSet=&quot;columnset1&quot;
  dpOptionSet=&quot;dataProviderOption1&quot;
  gridOptionSet=&quot;gridOption1&quot;
  styleSet=&quot;defaultStyle&quot;
  dataSet=&quot;griddata1&quot;&lt;/mark&gt;
  gridId=&quot;realgrid&quot;
  showToolbox=&quot;true&quot;
  gridWidth=&quot;100%&quot;
  gridHeight=&quot;300px&quot; %}
&lt;/pre&gt;

&lt;p&gt;각 행의 명령과 인자에 대해 아래 설명을 참조하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt;:  템플릿 파일명으로 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;realgrid.html&lt;/code&gt;을 입력합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gridVar&lt;/code&gt;:  페이지 전체에서 사용할 grid 변수&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dpVar&lt;/code&gt;: 페이지에서 사용할 data provider 변수&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fieldSet&lt;/code&gt;: 그리드의 field 정보를 담고 있는 json 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;successFieldSet&lt;/code&gt;: 필드파일을 성공적으로 읽어온 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doneFieldSet&lt;/code&gt;: 필드파일을 성공적으로 읽어온 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;successFieldSet()&lt;/code&gt;이 호출된후 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;failFieldSet&lt;/code&gt;: 필드파일 읽어오기 실패한 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;columnSet&lt;/code&gt;: 그리드의 column 정보를 담고 있는 json 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;successColumnSet&lt;/code&gt;: 컬럼파일을 성공적으로 읽어온 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doneColumnSet&lt;/code&gt;: 컬럼파일을 성공적으로 읽어온 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;successColumnSet()&lt;/code&gt;이 호출된후 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;failColumnSet&lt;/code&gt;: 컬럼파일 읽어오기 실패한 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dpOptionSet&lt;/code&gt;: 그리드의 data provider option 정보를 담고 있는 json 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;successDpOptionSet&lt;/code&gt;: 옵션파일을 성공적으로 읽어온 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doneDpOptionSet&lt;/code&gt;: 옵션파일을 성공적으로 읽어온 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;successDpOptionSet()&lt;/code&gt;이 호출된후 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;failDpOptionSet&lt;/code&gt;: 옵션파일 읽어오기 실패한 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gridOptionSet&lt;/code&gt;: 그리드의 option 정보를 담고 있는 json 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;successGridOptionSet&lt;/code&gt;: 옵션파일을 성공적으로 읽어온 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doneGridOptionSet&lt;/code&gt;: 옵션파일을 성공적으로 읽어온 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;successGridOptionSet()&lt;/code&gt;이 호출된후 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;failGridOptionSet&lt;/code&gt;: 옵션파일 읽어오기 실패한 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;styleSet&lt;/code&gt;: 그리드의 style 정보를 담고 있는 json 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;successStyleSet&lt;/code&gt;: 스타일파일을 성공적으로 읽어온 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doneStyleSet&lt;/code&gt;: 스타일파일을 성공적으로 읽어온 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;successStyleSet()&lt;/code&gt;이 호출된후 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;failStyleSet&lt;/code&gt;: 스타일파일을 읽어오기 실패한 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dataSet&lt;/code&gt;: 그리드의 data 를 담고 있는 json 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;successDataSet&lt;/code&gt;: 데이터파일을 성공적으로 읽어온 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doneDataSet&lt;/code&gt;: 데이터파일을 성공적으로 읽어온 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;successDataSet()&lt;/code&gt;이 호출된후 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;failDataSet&lt;/code&gt;: 데이터파일을 읽어오기 실패한 경우 호출됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gridId&lt;/code&gt;: 그리드가 위치할 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag id attribute&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;showToolbox&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 하면 툴박스 보여줍니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gridWidth&lt;/code&gt;: grid width style&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gridHeight&lt;/code&gt;: grid height style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리드의 레이아웃이나 데이터는 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;\resource&lt;/code&gt; 폴더에 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;option&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt; 이라 이름의 하위 폴더에 json 포멧의 파일로 작성합니다.
작성된 json파일의 파일명을 해당 인자의 값으로 넘겨주면 됩니다.&lt;/p&gt;

&lt;p&gt;위 코드중 마킹된 영역의 파일에 해당하는 인자들이 실제 어떤 경로에 위치해야 하는지 정보를 정리해 보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fieldSet=&quot;fieldset1&quot;&lt;/code&gt;: \resource\layout\fieldset1.json&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;columnSet=&quot;columnset1&quot;&lt;/code&gt;: \resource\layout\columnset1.json&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dpOptionSet=&quot;dataProviderOption1&quot;&lt;/code&gt;: \resource\option\dataProviderOption1.json&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gridOptionSet=&quot;gridOption1&quot;&lt;/code&gt;: \resource\option\gridOption1.json&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;styleSet=&quot;style1&quot;&lt;/code&gt;: \resource\style\style1.json&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dataSet=&quot;griddata1&quot;&lt;/code&gt;: \resource\data\griddata1.json&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-3&quot;&gt;그리드 구성시 콜백 처리방법&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;field&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dataProviderOption&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;gridOption&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;style&lt;/code&gt;은 각각 인자로 넘겨준 파일에서 그 정보를 읽어 그리드에 적용됩니다.
이때 각각의 파일은 jquery.getJSON()함수를 통해 불러오는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;success&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fail&lt;/code&gt;이 발생한 이후 처리를 위해 콜백함수를 인자로 넘겨줄수 있습니다.&lt;/p&gt;

&lt;p&gt;콜백함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 명령 이전에 정의되어야 하며 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;태그를 이용해 콜백함수를 정의하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; 명령의 인자로 넘겨주면 됩니다.&lt;/p&gt;

&lt;p&gt;콜백함수의 인자는 jquery XHR function의 인자와 동일한 구조입니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onSuccessFieldSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jqXHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'success:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onDoneFieldSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jqXHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onFailFieldSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jqxhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fail:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;pre&gt;

{% include realgrid.html
  gridVar=&quot;gridView&quot;
  dpVar=&quot;dataProvider&quot;
  fieldSet=&quot;fieldset1&quot;
  &lt;mark&gt;successFieldSet=&quot;onSuccessFieldSet&quot;&lt;/mark&gt;
  ...
%}

&lt;/pre&gt;

&lt;script&gt;
var onSuccessFieldSet = function(data, textStatus, jqXHR) {
    console.log('[EVENT LOG] onSuccessFieldSet');
}
var onDoneFieldSet = function(data, textStatus, jqXHR) {
    console.log('[EVENT LOG] onDoneFieldSet');
}
var onFailFieldSet = function(jqxhr, textStatus, error) {
    console.log('[EVENT LOG] onFailFieldSet');
}
&lt;/script&gt;

&lt;div id=&quot;realgrid&quot; class=&quot;realgrid&quot; style=&quot;width:100%; height:300px&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;toolbox&quot;&gt;
  &lt;div class=&quot;buttonbox&quot;&gt;
    
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realgridfield')&quot;&gt;필드&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realgridcolumn')&quot;&gt;컬럼&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realgriddpoption')&quot;&gt;Provider 옵션&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realgridviewoption')&quot;&gt;Grid 옵션&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realgridstyle')&quot;&gt;스타일&lt;/a&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;codeview realgridfield&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realgridcolumn&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realgriddpoption&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realgridviewoption&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realgridstyle&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
    var gridView;
    var dataProvider;

    $(document).ready( function(){
        RealGridJS.setRootContext(&quot;/demo/lib/realgrid/realgridjs_eval.1.1.20&quot;);

        dataProvider = new RealGridJS.LocalDataProvider();
        gridView = new RealGridJS.GridView(&quot;realgrid&quot;);
        gridView.setDataSource(dataProvider);

        
            

            $.getJSON(&quot;/demo/resource/layout/fieldset1.json&quot;, function (data, textStatus, jqXHR) {
                dataProvider.setFields(data);

                $('.codeview.realgridfield').html(
                  JSON.stringify(data, null, 4)
                );

                
                  onSuccessFieldSet(data, textStatus, jqXHR);
                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView.setFocus();

                
                  onDoneFieldSet(data, textStatus, jqXHR);
                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  onFailFieldSet(jqxhr, textStatus, error);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/layout/columnset1.json&quot;, function (data, textStatus, jqXHR) {
                gridView.setColumns(data);

                $('.codeview.realgridcolumn').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView failColumnSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/option/dataProviderOption1.json&quot;, function (data, textStatus, jqXHR) {
                dataProvider.setOptions(data);

                $('.codeview.realgriddpoption').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView failDpOptionSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/option/gridOption1.json&quot;, function (data, textStatus, jqXHR) {
                gridView.setOptions(data);

                $('.codeview.realgridviewoption').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView failGridOptionSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/style/defaultStyle.json&quot;, function (data, textStatus, jqXHR) {
                gridView.setStyles(data);

                $('.codeview.realgridstyle').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView failStyleSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        


        
            

            $.getJSON(&quot;/demo/resource/data/griddata1.json&quot;, function (data, textStatus, jqXHR) {
                dataProvider.setRows(data);

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView failDataSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

    });
&lt;/script&gt;

&lt;h2 id=&quot;section-tree-&quot;&gt;&lt;section-tree&gt;트리 표시하기&lt;/section-tree&gt;&lt;/h2&gt;

&lt;p&gt;트리도 그리드와 동일한 방법으로 페이지에 추가합니다. 단지, 아래와 같이 몇 개의 인자명만 바꿔주면 됩니다.&lt;/p&gt;

&lt;pre&gt;
{% include &lt;mark&gt;realtree.html&lt;/mark&gt;
  &lt;mark&gt;treeVar&lt;/mark&gt;=&quot;treeView&quot;
  dpVar=&quot;dataProvider&quot;
  fieldSet=&quot;fieldset1&quot;
  columnSet=&quot;columnset1&quot;
  dpOptionSet=&quot;treeDataProviderOption1&quot;
  &lt;mark&gt;treeOptionSet&lt;/mark&gt;=&quot;treeOption1&quot;
  styleSet=&quot;style1&quot;
  dataSet=&quot;griddata1&quot;
  &lt;mark&gt;treeId&lt;/mark&gt;=&quot;realtree&quot;
  &lt;mark&gt;treeField&lt;/mark&gt;=&quot;tree&quot;
  &lt;mark&gt;needSorting&lt;/mark&gt;=&quot;true&quot;
  &lt;mark&gt;childrenField&lt;/mark&gt;=&quot;&quot;
  &lt;mark&gt;iconField&lt;/mark&gt;=&quot;icon&quot;
  &lt;mark&gt;treeWidth&lt;/mark&gt;=&quot;100%&quot;
  &lt;mark&gt;treeHeight&lt;/mark&gt;=&quot;300px&quot; %}
&lt;/pre&gt;

&lt;p&gt;위 코드를 입력하면 트리는 아래와 같이 표시됩니다.&lt;/p&gt;

&lt;div id=&quot;realtree&quot; class=&quot;realgrid&quot; style=&quot;width:100%; height:300px&quot;&gt;&lt;/div&gt;

&lt;div class=&quot;toolbox&quot;&gt;
  &lt;div class=&quot;buttonbox&quot;&gt;
    
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realtreefield')&quot;&gt;필드&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realtreecolumn')&quot;&gt;컬럼&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realtreedpoption')&quot;&gt;Provider 옵션&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realtreeviewoption')&quot;&gt;Tree 옵션&lt;/a&gt;
    &lt;a class=&quot;btn tertiary small lowercase&quot; onclick=&quot;showCodes(event, 'realtreestyle')&quot;&gt;스타일&lt;/a&gt;
  &lt;/div&gt;
  &lt;pre class=&quot;codeview realtreefield&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realtreecolumn&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realtreedpoption&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realtreeviewoption&quot;&gt;&lt;/pre&gt;
  &lt;pre class=&quot;codeview realtreestyle&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
    var treeView;
    var treeDataProvider;

    $(document).ready( function(){
        RealGridJS.setRootContext(&quot;/demo/lib/realgrid/realgridjs_eval.1.1.20&quot;);

        treeDataProvider = new RealGridJS.LocalTreeDataProvider();
        treeView = new RealGridJS.TreeView(&quot;realtree&quot;);
        treeView.setDataSource(treeDataProvider);

        
            

            $.getJSON(&quot;/demo/resource/layout/treeFieldset1.json&quot;, function (data, textStatus, jqXHR) {
                treeDataProvider.setFields(data);

                $('.codeview.realtreefield').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                treeView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  console &amp;&amp; console.log(&quot;jQuery getJSON() Failed: &quot; + err);
                  alert(&quot;jQuery getJSON() Failed: &quot; + err);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/layout/treeColumnset1.json&quot;, function (data, textStatus, jqXHR) {
                treeView.setColumns(data);

                $('.codeview.realtreecolumn').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                treeView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  console &amp;&amp; console.log(&quot;jQuery getJSON() Failed: &quot; + err);
                  alert(&quot;jQuery getJSON() Failed: &quot; + err);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/option/treeDataProviderOption1.json&quot;, function (data, textStatus, jqXHR) {
                treeDataProvider.setOptions(data);

                $('.codeview.realtreedpoption').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                treeView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  console &amp;&amp; console.log(&quot;jQuery getJSON() Failed: &quot; + err);
                  alert(&quot;jQuery getJSON() Failed: &quot; + err);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/option/treeOption1.json&quot;, function (data, textStatus, jqXHR) {
                treeView.setOptions(data);

                $('.codeview.realtreeviewoption').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                treeView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  console &amp;&amp; console.log(&quot;jQuery getJSON() Failed: &quot; + err);
                  alert(&quot;jQuery getJSON() Failed: &quot; + err);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/style/treeStyle1.json&quot;, function (data, textStatus, jqXHR) {
                treeView.setStyles(data);

                $('.codeview.realtreestyle').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                treeView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  console &amp;&amp; console.log(&quot;jQuery getJSON() Failed: &quot; + err);
                  alert(&quot;jQuery getJSON() Failed: &quot; + err);
                
            });
        


        
            

            $.getJSON(&quot;/demo/resource/data/treedata1.json&quot;, function (data, textStatus, jqXHR) {
                treeDataProvider.setRows(
                  data
                   ,&quot;tree&quot; 
                   ,true 
                   ,&quot;&quot; 
                   ,&quot;icon&quot; 
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                treeView.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  console &amp;&amp; console.log(&quot;jQuery getJSON() Failed: &quot; + err);
                  alert(&quot;jQuery getJSON() Failed: &quot; + err);
                
            });
        

    });
&lt;/script&gt;

&lt;p&gt;그리드(또는 트리)는 인자로 입력했던 변수명을 이용해 그리드를 컨트롤 할 수 있습니다.
아래 버튼을 눌러 위에 표시된 트리에 아이콘을 입력하는 동작을 실행해 보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn primary small round lowercase&quot; id=&quot;btnAddTreeIcons&quot;&gt;트리에 아이콘 넣기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 버튼을 눌렀을때 트리에 아이콘을 추가하는 동작을 작동시키기 위해 아래 코드를 페이지에 삽입합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;btn primary small round lowercase&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;btnAddTreeIcons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;트리에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아이콘&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;넣기&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#btnAddTreeIcons'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;ar.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;br.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;fr.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;mx.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;pt.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;es.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;gb.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;us.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;ve.png&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RealGridJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ImageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;smallflag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; | prepend: site.baseurl}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/mark&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;    
    &lt;span class=&quot;nx&quot;&gt;imageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgFiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;treeView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerImageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;treeView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTreeOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;iconImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;iconWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;여기서 아이콘 이미지를 불러오기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource/image&lt;/code&gt; 폴더를 참조 한다는 것과 &lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt;필터를 사용해야 한다는 것을 주의해서 작성 하시면 됩니다.&lt;/p&gt;

&lt;script&gt;
$('#btnAddTreeIcons').click(function() {
  var imgFiles = [
                &quot;ar.png&quot;,
                &quot;br.png&quot;,
                &quot;fr.png&quot;,
                &quot;mx.png&quot;,
                &quot;pt.png&quot;,
                &quot;es.png&quot;,
                &quot;gb.png&quot;,
                &quot;us.png&quot;,
                &quot;ve.png&quot;
    ];
    var imageList = new RealGridJS.ImageList(&quot;images&quot;, &quot;/demo/resource/image/smallflag/&quot;);

    imageList.addUrls(imgFiles);
    treeView.registerImageList(imageList);

    treeView.setTreeOptions({
        iconImages: imageList.getName(),
        iconWidth: 20
    });
});
&lt;/script&gt;

&lt;h2 id=&quot;dev-box&quot;&gt;데브 박스(dev. box)&lt;/h2&gt;

&lt;p&gt;데브박스는 오른쪽에 표시되는 코드 입력창이며, 기본적으로 지킬에 의해 markdown 렌더링 되기 때문에 위에 작성한 문서 작성방법과 동일한 방법으로 문서를 작성 하시면 됩니다.&lt;/p&gt;

&lt;p&gt;버튼 동작의 경우 첫 번째 기본버튼만 사용하세요.&lt;/p&gt;

&lt;p&gt;프론트메터의 &lt;code class=&quot;highlighter-rouge&quot;&gt;devboxfile&lt;/code&gt;에 기록된 파일을 &lt;code class=&quot;highlighter-rouge&quot;&gt;./devbox&lt;/code&gt; 폴더에 넣어 두면 자동으로 로드됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데브박스에 부제목 넣기: 데브박스 작성시 부제목은 ####(샵샵샵샵)을 사용하면 됩니다.&lt;/li&gt;
  &lt;li&gt;데브박스에 버튼 및 체크박스 넣기: &lt;a href=&quot;/demo/Tree/TreeNodeControl/&quot;&gt;트리노드 페이지 참조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;grid-toolbox--&quot;&gt;&lt;grid-toolbox&gt;그리드 툴 박스&lt;/grid-toolbox&gt;&lt;/h2&gt;

&lt;p&gt;그리드 툴 박스는 각각의 그리드에 대한 정보를 조회할 수 있는 툴버튼과 공통기능 동작을 위한 버튼으로 구성됩니다.&lt;/p&gt;

&lt;p&gt;툴 박스는 그리드나 트리의 아래쪽에 표시됩니다. 툴 박스를 보이지 않기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;showToolbox=false&lt;/code&gt;로 인자의 값을 입력하시면 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필드정보 보기&lt;/li&gt;
  &lt;li&gt;컬럼정보 보기&lt;/li&gt;
  &lt;li&gt;옵션정보 보기&lt;/li&gt;
  &lt;li&gt;스타일정보 보기&lt;/li&gt;
  &lt;li&gt;데이터 보기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;툴 박스 없는 그리드 만들기&lt;/p&gt;

&lt;div id=&quot;realgrid1&quot; class=&quot;realgrid&quot; style=&quot;width:100%; height:300px&quot;&gt;&lt;/div&gt;

&lt;script&gt;
    var gridView1;
    var dataProvider1;

    $(document).ready( function(){
        RealGridJS.setRootContext(&quot;/demo/lib/realgrid/realgridjs_eval.1.1.20&quot;);

        dataProvider1 = new RealGridJS.LocalDataProvider();
        gridView1 = new RealGridJS.GridView(&quot;realgrid1&quot;);
        gridView1.setDataSource(dataProvider1);

        
            

            $.getJSON(&quot;/demo/resource/layout/carFields1.json&quot;, function (data, textStatus, jqXHR) {
                dataProvider1.setFields(data);

                $('.codeview.realgrid1field').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView1.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView1 failFieldSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

        
            

            $.getJSON(&quot;/demo/resource/layout/carColumns1.json&quot;, function (data, textStatus, jqXHR) {
                gridView1.setColumns(data);

                $('.codeview.realgrid1column').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView1.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView1 failColumnSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

        

        

        
            

            $.getJSON(&quot;/demo/resource/style/defaultStyle.json&quot;, function (data, textStatus, jqXHR) {
                gridView1.setStyles(data);

                $('.codeview.realgrid1style').html(
                  JSON.stringify(data, null, 4)
                );

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView1.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView1 failStyleSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        


        
            

            $.getJSON(&quot;/demo/resource/data/carData1.json&quot;, function (data, textStatus, jqXHR) {
                dataProvider1.setRows(data);

                
            })
            .done(function (data, textStatus, jqXHR) {
                gridView1.setFocus();

                
            })
            .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ', ' + error;

                
                  var msg = &quot;gridView1 failDataSet: &quot; + err;
                  console &amp;&amp; console.log(msg);
                  alert(msg);
                
            });
        

    });
&lt;/script&gt;

&lt;h2 id=&quot;bootstrap&quot;&gt;Bootstrap&lt;/h2&gt;

&lt;p&gt;Bootstrap UI는 부분적으로만 적용합니다.&lt;/p&gt;

&lt;p&gt;2016년 11월 현재 CSS의 row와 column 관련 스타일만 적용하고 있습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2016 00:00:00 +0900</pubDate>
        <link>demo.realgrid.com/demo/guide/</link>
        <guid isPermaLink="true">demo.realgrid.com/demo/guide/</guid>
        
        
        <category>intro</category>
        
      </item>
    
  </channel>
</rss>
